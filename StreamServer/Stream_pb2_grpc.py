# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Stream_pb2 as Stream__pb2


class StreamServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.testFunc = channel.unary_unary(
                '/StreamServer.StreamService/testFunc',
                request_serializer=Stream__pb2.TestRequest.SerializeToString,
                response_deserializer=Stream__pb2.TestMessage.FromString,
                )
        self.testStreamFunc = channel.unary_stream(
                '/StreamServer.StreamService/testStreamFunc',
                request_serializer=Stream__pb2.TestStreamRequest.SerializeToString,
                response_deserializer=Stream__pb2.TestStreamMessage.FromString,
                )


class StreamServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def testFunc(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def testStreamFunc(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'testFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.testFunc,
                    request_deserializer=Stream__pb2.TestRequest.FromString,
                    response_serializer=Stream__pb2.TestMessage.SerializeToString,
            ),
            'testStreamFunc': grpc.unary_stream_rpc_method_handler(
                    servicer.testStreamFunc,
                    request_deserializer=Stream__pb2.TestStreamRequest.FromString,
                    response_serializer=Stream__pb2.TestStreamMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StreamServer.StreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def testFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StreamServer.StreamService/testFunc',
            Stream__pb2.TestRequest.SerializeToString,
            Stream__pb2.TestMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def testStreamFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/StreamServer.StreamService/testStreamFunc',
            Stream__pb2.TestStreamRequest.SerializeToString,
            Stream__pb2.TestStreamMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
